@page "/Orders"
@inject IOrderService OrderService
@inject OrderItemService OrderItemService
<h3>Orders</h3>
<h4>Create Order</h4>
<div class="text-white">
  <h5>Order List</h5>
  @if(orders.Count == 0)
  {
    <p>No orders yet</p>
  }
  else
  {  <table class="table table-striped table-dark">
       <thead>
       <tr>
         <th>Item Name</th>
         <th>Unit Price</th>
         <th>Units</th>
         <th>Total Price</th>
         <th></th>
       </tr>
       </thead>
       <tbody>
       @foreach (var order in orders)
       {
         <tr>
           <td>@order.Name</td>
           <td>@order.Price</td>
           <td>@order.Quantity</td>
           <td>@order.Total</td>
           <td><button class="btn btn-danger p-1" @onclick="() => { orders.Remove(order); StateHasChanged();}">Delete</button></td>
         </tr>
       }
       </tbody>
     </table>
    <button class="btn btn-success p-1" @onclick="CreateOrder">Create Order</button>


  }
    
</div>
<div class="row">
  <div class="col">
              <div>
                <div class="text-white">
                  <div class="row">
                    <select @bind="Id" class="form-select col" aria-label="Default select example">
                      <option disabled selected>Item</option>
                      @foreach(var product in LocalDb.AvailableProducts)
                      {
                        <option @onclick="()=>SetProduct(product)" value="@product.Id">@product.Name</option>
                      }
                    </select>
                    <div class="col">
                      <input type="number" @bind="selectedProduct.UnitPrice" class="form-control bg-dark text-white" placeholder="Unit Price" disabled>
                    </div>
                    <div class="col">
                      <input type="number" @bind="Unites" class="form-control bg-dark text-white" placeholder="Unites">
                    </div>
                    <div class="col">
                      <button class="btn btn-success p-1" @onclick="AddToProductList">Add to List</button>
                    </div>
                  </div>
                </div>
              </div>
  </div>
  
  <div class="col">
          <div class="col-md-5 col-lg-4 order-md-last">
            <h4 class="d-flex justify-content-between align-items-center mb-3">
              <span class="text-primary">Your cart</span>
              <span class="badge bg-primary rounded-pill">3</span>
            </h4>
            <ul class="list-group mb-3">
              @foreach (var product in ourOrder.Products)
              {
                <li class="list-group-item d-flex justify-content-between lh-sm bg-dark text-light">
                  <div>
                    <h6 class="my-0">@product.Name</h6>
                    <small class="text-body-secondary"> Price : @product.UnitPrice</small>
                    <small class="text-body-secondary"> Quantity : @product.Quantity</small>
                  </div>
                  <span class="text-body-secondary">K @product.TotalPrice</span>
                </li>
              }
    
    
              <li class="list-group-item d-flex justify-content-between">
                <span>Total (USD)</span>
                <strong>K @ourOrder.TotalAmount</strong>
              </li>
            </ul>
              <button class="w-100 btn btn-primary btn-lg" @onclick="AddOrder">Make Order</button>
    
          </div>

  </div>
</div>






<h4>Our Orders</h4>
@foreach (var order in LocalDb.OurOrders)
{
  
  <table class="table table-dark table-hover">
    <thead>
    <tr>
      <th>Product Name</th>
      <th>Product Quantity</th>
      <th>Product Barcode</th>
      <th>Product Location</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var product in ourOrder.Products)
    {
      <tr>
        <td>@product.Name</td>
        <td>@product.Quantity</td>
        <td>@product.Barcode</td>
        <td>@product.Location</td>
      </tr>
    }
        
    </tbody>
  </table>
}

@code {
  List<OrderItem> orders = new List<OrderItem>();
  List<Order> dborders = new List<Order>();
    OrderItem order = new OrderItem();
  
    private async Task CreateOrder()
    {
      Order order = new()
      {
        Direction = Direction.In,
        Name = "00000",
        OrderDate = DateTime.Now,
        OrderItemsList = orders,
        Status = Status.Pending, VendorName = "uNKNOWN", OrderNumber = "0000"

      };
      var dbOrder = await OrderService.Create(order);
      foreach (var nOrder in orders)
      {
        nOrder.OrderId = dbOrder.Id;
        await OrderItemService.Create(nOrder);
      }
      
        orders.Clear();
    }

  protected override async void OnInitialized()
  {
      // dborders = (await OrderService.Get()).Where(x=>x.Direction == Direction.In).ToList();
    StateHasChanged();
  }

}


@code {
  OurOrder ourOrder = new();

  int Id = 1;
  int Unites = 0;

  Product selectedProduct { get => LocalDb.AvailableProducts.FirstOrDefault(x => x.Id == Id); set { } }
  
  
  
  Order dborde = new Order();
  
  void SetProduct(Product product)
  {
    selectedProduct = product;
    Console.WriteLine(selectedProduct.Name);
    StateHasChanged();
  }

  void AddToProductList()
  {
    ourOrder.Products.Add(
      new ()
      {
        Id = selectedProduct.Id,
        Name = selectedProduct.Name,
        Quantity = Unites,
        UnitPrice = selectedProduct.UnitPrice,
      }); 
    selectedProduct = new Product();
    
    StateHasChanged();
    
  }
  
  void AddOrder()
  {
    LocalDb.OurOrders.Add(ourOrder);
    ourOrder = new ();
    StateHasChanged();
  }




}