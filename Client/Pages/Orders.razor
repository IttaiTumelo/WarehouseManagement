@page "/Orders"
@inject IOrderService OrderService
@inject OrderItemService OrderItemService
<h3>Orders</h3>
<h4>Create Order</h4>
<div class="text-white">
  <h5>Order List</h5>
  @if(orders.Count == 0)
  {
    <p>No orders yet</p>
  }
  else
  {  <table class="table table-striped table-dark">
       <thead>
       <tr>
         <th>Item Name</th>
         <th>Unit Price</th>
         <th>Units</th>
         <th>Total Price</th>
         <th></th>
       </tr>
       </thead>
       <tbody>
       @foreach (var order in orders)
       {
         <tr>
           <td>@order.Name</td>
           <td>@order.Price</td>
           <td>@order.Quantity</td>
           <td>@order.Total</td>
           <td><button class="btn btn-danger p-1" @onclick="() => { orders.Remove(order); StateHasChanged();}">Delete</button></td>
         </tr>
       }
       </tbody>
     </table>
    <button class="btn btn-success p-1" @onclick="CreateOrder">Create Order</button>


  }
    
</div>
<div>
    <div class="text-white">
      <div class="row">
        <div class="col-7">
          <input type="text" @bind="order.Name" class="form-control bg-dark text-white" placeholder="Item Name">
        </div>
        <div class="col">
          <input type="number" @bind="order.Price" class="form-control bg-dark text-white" placeholder="Unit Price">
        </div>
        <div class="col">
          <input type="number" @bind="order.Quantity" class="form-control bg-dark text-white" placeholder="Unites">
        </div>
        <div class="col">
          <button class="btn btn-success p-1" @onclick="() => { orders.Add(order); order = new(); StateHasChanged();}">Add to List</button>
        </div>
      </div>
    </div>
</div>

<h4>Our Orders</h4>

<table class="table table-dark table-hover">
  <thead>
    <tr>
      <th scope="col">#</th>
      <th scope="col">Code</th>
      <th scope="col">vendor name</th>
      <th scope="col">items list</th>
      <th scope="col">total amount</th>
      <th scope="col">status</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var item in dborders)
    {
        <tr data-bs-toggle="modal" data-bs-target="#exampleModal">
            <th scope="row">@item.Id</th>
            <td>@item.Name</td>
            <td>@item.VendorName</td>
            <td>
                @foreach(var i in item.OrderItemsList)
                {
                    <p>@i.ToString()</p>
                }
            </td>
            <td>@item.TotalAmount</td>
            <td>@item.Status</td>
        </tr>
    }

  </tbody>
</table>
@code {
  List<OrderItem> orders = new List<OrderItem>();
  List<Order> dborders = new List<Order>();
    OrderItem order = new OrderItem();
  
    private async Task CreateOrder()
    {
      Order order = new()
      {
        Direction = Direction.In,
        Name = "00000",
        OrderDate = DateTime.Now,
        OrderItemsList = orders,
        Status = Status.Pending, VendorName = "uNKNOWN", OrderNumber = "0000"

      };
      var dbOrder = await OrderService.Create(order);
      foreach (var nOrder in orders)
      {
        nOrder.OrderId = dbOrder.Id;
        await OrderItemService.Create(nOrder);
      }
      
        orders.Clear();
    }

  protected override async void OnInitialized()
  {
      dborders = (await OrderService.Get()).Where(x=>x.Direction == Direction.In).ToList();
    StateHasChanged();
  }

}